cfg$iterations = 1000
cfg$inertia = 0.9
cfg$iterations = 500
PSO_DLS_SA_result = test(PSO_DLS_SA, cfg, functions, monteCarlo)
PSO_DLS_result
functionsResult = list()
for(i in 1:length(functions)){
pso = PSO_result[[i]]$pso_gbest
pso_dls = PSO_DLS_result[[i]]$pso_gbest
pso_dls_sa = PSO_DLS_SA_result[[i]]$pso_gbest
functionsResult[[i]] = list()
functionsResult[[i]]$tests1 = wilcox.test(pso_dls, pso, paired = TRUE, alternative = "less", conf.level = 0.95)
functionsResult[[i]]$tests2 = wilcox.test(pso_dls_sa, pso, paired = TRUE, alternative = "less", conf.level = 0.95)
functionsResult[[i]]$tests3 = wilcox.test(pso_dls_sa, pso_dls, paired = TRUE, alternative = "less", conf.level = 0.95)
functionsResult[[i]]$pso = getMetrics(pso)
functionsResult[[i]]$pso_dls = getMetrics(pso_dls)
functionsResult[[i]]$pso_dls_sa = getMetrics(pso_dls_sa)
saveRDS(functionsResult, "results/results.rds")
}
getMetrics = function(vec){
return (list(
min = min(vec),
max = max(vec),
mean = mean(vec),
median = median(vec),
sd = sd(vec)
))
}
functionsResult = list()
for(i in 1:length(functions)){
pso = PSO_result[[i]]$pso_gbest
pso_dls = PSO_DLS_result[[i]]$pso_gbest
pso_dls_sa = PSO_DLS_SA_result[[i]]$pso_gbest
functionsResult[[i]] = list()
functionsResult[[i]]$tests1 = wilcox.test(pso_dls, pso, paired = TRUE, alternative = "less", conf.level = 0.95)
functionsResult[[i]]$tests2 = wilcox.test(pso_dls_sa, pso, paired = TRUE, alternative = "less", conf.level = 0.95)
functionsResult[[i]]$tests3 = wilcox.test(pso_dls_sa, pso_dls, paired = TRUE, alternative = "less", conf.level = 0.95)
functionsResult[[i]]$pso = getMetrics(pso)
functionsResult[[i]]$pso_dls = getMetrics(pso_dls)
functionsResult[[i]]$pso_dls_sa = getMetrics(pso_dls_sa)
saveRDS(functionsResult, "results/results.rds")
}
i = 1
pso = PSO_result[[i]]$pso_gbest
pso_dls = PSO_DLS_result[[i]]$pso_gbest
pso_dls_sa = PSO_DLS_SA_result[[i]]$pso_gbest
pso_dls_sa
pso_dls
pso
PSO_DLS_SA_result[[1]]
plot(PSO_DLS_SA_result[[1]]$pso_mean_cost)
lines(PSO_DLS_SA_result[[1]]$pso_mean_cost)
pso_dls
pso_dls_sa
cfg = c()
cfg$dim = 10
cfg$lower = -100
cfg$upper = 100
cfg$swarm_size = 40
cfg$c1 = 1.49445
cfg$c2 = 1.49445
cfg$max_vel = 100
cfg$inertia = 0.9
cfg$iterations = 2500
PSO_DLS_SA_result[[2]]
PSO_DLS_SA_result[[3]]
PSO_DLS_SA_result[[2]]$pso_gbest
PSO_DLS_SA_result[[3]]$pso_gbest
PSO_DLS_SA_result[[4]]$pso_gbest
PSO_DLS_SA_result[[5]]$pso_gbest
PSO_DLS_SA_result[[6]]$pso_gbest
PSO_DLS_result[[6]]$pso_gbest
summary(PSO_DLS_result[[6]]$pso_gbest)
PSO_DLS = function(config){
newParticle = function(pos, vel, swarm, fitFun, temp) {
return (list(
pos = pos,
vel = vel,
best = list(
pos = pos,
type = 1,
val = fitFun(pos),
temp = temp
),
type = 1,
swarm = swarm
))
}
calculateBest = function(particles) {
globalBest = particles[[1]]$best
globalBest$val = 10000000
localBest = list()
for(i in 1:config$sub_swarms){
localBest[[i]] = globalBest
}
for(i in 1:length(particles)){
swarm = particles[[i]]$swarm
p = acceptProbability(localBest[[swarm]]$val, particles[[i]]$best$val, particles[[i]]$best$temp)
r = runif(1)
if(p > r){
localBest[[swarm]] = particles[[i]]$best
}
if(particles[[i]]$best$val < globalBest$val){
globalBest = particles[[i]]$best
}
}
for(i in 1:length(particles)){
swarm = particles[[i]]$swarm
if(particles[[i]]$best$val == localBest[[swarm]]$val){
particles[[i]]$best$temp = particles[[i]]$best$temp * (1 - config$coolingRate)
}else{
particles[[i]]$best$temp = particles[[i]]$best$temp  + (particles[[i]]$best$temp * config$heatingRate)
if(particles[[i]]$best$temp > config$initialTemp){
particles[[i]]$best$temp = config$initialTemp
}
}
}
pos = c()
for(i in 1:length(localBest)){
pos = rbind(pos, localBest[[i]]$pos)
}
pos = colMeans(as.matrix(pos))
unitedLocalbest = globalBest
unitedLocalbest$pos = pos
unitedLocalbest$val = config$fun(pos);
best = list(globalBest, localBest, unitedLocalbest, particles)
return(best)
}
updatePos = function(particle, p, lbest, unitedLbest){
personal = config$c1 * runif(1) * (particle$best$pos - particle$pos)
chance = runif(1)
if(chance <= p){
particle$type = 2
particle$best$type = 2
social = config$c2 * runif(1) * (unitedLbest$pos - particle$pos)
}else {
particle$type = 1
particle$best$type = 1
social = config$c2 * runif(1) * (lbest[[particle$swarm]]$pos - particle$pos)
}
particle$vel = (config$inertia * particle$vel) + personal + social
particle$vel = apply(as.matrix(particle$vel), 1, function(x){min(x,config$max_vel)})
particle$vel = apply(as.matrix(particle$vel), 1, function(x){max(x,-config$max_vel)})
particle$pos = particle$pos + particle$vel
for(i in 1:config$dim){
particle$pos[i] = min(particle$pos[i], config$upper[i])
particle$pos[i] = max(particle$pos[i], config$lower[i])
}
val = config$fun(particle$pos);
if(val < particle$best$val){
particle$best$pos = particle$pos
particle$best$val = val
}
return (particle)
}
push = function(arr, element){
len = length(arr)
arr[[len + 1]] = element
return(arr)
}
acceptProbability = function(currentFit, newFit, temperature){
if(newFit == currentFit) {
return (0)
}
if(newFit < currentFit){
return (1)
}
return (exp((currentFit - newFit) / temperature))
}
savePng = function(){
return (config$savePng && config$dim == 2)
}
# Main loop
colors = c("gray0", "deeppink4", "green",
"red", "darkblue", "cyan",
"darkorchid", "deepskyblue2", "darkgreen",
"chocolate1", "darkgoldenrod1")
particles = list()
p = 0
# Init particles with random position and velocity
for(swarmIndex in 1:config$sub_swarms){
for(j in 1:config$swarm_size){
pos = c()
for(i in 1:config$dim){
pos[i] = runif(1) * (config$limitUpper - config$limitLower) + config$limitLower
}
vel = rep(0, config$dim)
particles = push(particles, newParticle(pos, vel, swarmIndex, config$fun, config$initialTemp))
}
}
# Calculate initial best particles
best = calculateBest(particles);
gbest = best[[1]]
lbest = best[[2]]
unitedLbest = best[[3]]
particles = best[[4]]
cost = c()
for(it in 1:config$iterations){
# Update p
p = it / config$iterations * 2
if(p > 1) p = 1
#print (temp)
if(savePng()){
dir.create("plot/dls", showWarnings = FALSE)
if(it < 10) it = paste("0", it, sep="")
if(it < 100) it = paste("0", it, sep="")
name = paste(config$savePngPath, "dls/dls", it, ".png", sep="")
png(filename=name)
plot("", ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[2]))
}
# Update particle positions
for(i in 1:length(particles)){
particles[[i]] = updatePos(particles[[i]], p, lbest, unitedLbest)
if(savePng()){
points(particles[[i]]$pos[1], particles[[i]]$pos[2], ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[1]), col = colors[particles[[i]]$swarm], pch=c(1,4)[particles[[i]]$type])
}
}
# Update gbest, lbest, unitedLbest
best = calculateBest(particles);
gbest = best[[1]]
lbest = best[[2]]
unitedLbest = best[[3]]
particles = best[[4]]
# for(i in 1:length(particles)){print(particles[[i]]$best$temp)}
if(savePng()){
for(i in 1:config$sub_swarms){
points(lbest[[i]]$pos[1], lbest[[i]]$pos[2], ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[1]), cex = 2, lwd = 2, col= colors[i], pch=c(1,4)[lbest[[i]]$type])
}
points(unitedLbest$pos[1], unitedLbest$pos[2], ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[1]), lwd = 3, col="orange", pch=23)
dev.off()
}
cost = c(cost,gbest$val)
}
if(savePng()){
name = paste(config$savePngPath, "dls/dls0.png", sep="")
png(filename=name)
plot(cost, type = "s")
dev.off()
}
return (gbest)
}
path = "C:/Projects/pso/pso"
setwd(path)
source("functions.r")
config = c()
config$dim = 2
config$lower = c(-100, -100)
config$upper = c(100, 100)
config$fun = cf01
config$swarm_size = 4
config$c1 = 1.49445
config$c2 = 1.49445
config$max_vel = 6
config$inertia = 0.9
config$iterations = 200
config$coolingRate = 0.05
config$heatingRate = 0.01
config$initialTemp = 1000
config$sub_swarms = 10
config$limitLower = -100
config$limitUpper = 100
config$savePng = TRUE
config$savePngPath = "C:/Projects/pso/pso/plot/"
PSO_DLS(config)
PSO_DLS = function(config){
newParticle = function(pos, vel, swarm, fitFun, temp) {
return (list(
pos = pos,
vel = vel,
best = list(
pos = pos,
type = 1,
val = fitFun(pos),
temp = temp
),
type = 1,
swarm = swarm
))
}
calculateBest = function(particles) {
globalBest = particles[[1]]$best
globalBest$val = 10000000
localBest = list()
for(i in 1:config$sub_swarms){
localBest[[i]] = globalBest
}
for(i in 1:length(particles)){
swarm = particles[[i]]$swarm
p = acceptProbability(localBest[[swarm]]$val, particles[[i]]$best$val, particles[[i]]$best$temp)
r = runif(1)
if(p > r){
localBest[[swarm]] = particles[[i]]$best
}
if(particles[[i]]$best$val < globalBest$val){
globalBest = particles[[i]]$best
}
}
for(i in 1:length(particles)){
swarm = particles[[i]]$swarm
if(particles[[i]]$best$val == localBest[[swarm]]$val){
particles[[i]]$best$temp = particles[[i]]$best$temp * (1 - config$coolingRate)
}else{
particles[[i]]$best$temp = particles[[i]]$best$temp  + (particles[[i]]$best$temp * config$heatingRate)
if(particles[[i]]$best$temp > config$initialTemp){
particles[[i]]$best$temp = config$initialTemp
}
}
}
pos = c()
for(i in 1:length(localBest)){
pos = rbind(pos, localBest[[i]]$pos)
}
pos = colMeans(as.matrix(pos))
unitedLocalbest = globalBest
unitedLocalbest$pos = pos
unitedLocalbest$val = config$fun(pos);
best = list(globalBest, localBest, unitedLocalbest, particles)
return(best)
}
updatePos = function(particle, p, lbest, unitedLbest){
personal = config$c1 * runif(1) * (particle$best$pos - particle$pos)
chance = runif(1)
if(chance <= p){
particle$type = 2
particle$best$type = 2
social = config$c2 * runif(1) * (unitedLbest$pos - particle$pos)
}else {
particle$type = 1
particle$best$type = 1
social = config$c2 * runif(1) * (lbest[[particle$swarm]]$pos - particle$pos)
}
particle$vel = (config$inertia * particle$vel) + personal + social
particle$vel = apply(as.matrix(particle$vel), 1, function(x){min(x,config$max_vel)})
particle$vel = apply(as.matrix(particle$vel), 1, function(x){max(x,-config$max_vel)})
particle$pos = particle$pos + particle$vel
for(i in 1:config$dim){
particle$pos[i] = min(particle$pos[i], config$upper[i])
particle$pos[i] = max(particle$pos[i], config$lower[i])
}
val = config$fun(particle$pos);
if(val < particle$best$val){
particle$best$pos = particle$pos
particle$best$val = val
}
return (particle)
}
push = function(arr, element){
len = length(arr)
arr[[len + 1]] = element
return(arr)
}
acceptProbability = function(currentFit, newFit, temperature){
if(newFit == currentFit) {
return (0)
}
if(newFit < currentFit){
return (1)
}
return (exp((currentFit - newFit) / temperature))
}
savePng = function(){
return (config$savePng && config$dim == 2)
}
# Main loop
colors = c("gray0", "deeppink4", "green",
"red", "darkblue", "cyan",
"darkorchid", "deepskyblue2", "darkgreen",
"chocolate1", "darkgoldenrod1")
particles = list()
p = 0
# Init particles with random position and velocity
for(swarmIndex in 1:config$sub_swarms){
for(j in 1:config$swarm_size){
pos = c()
for(i in 1:config$dim){
pos[i] = runif(1) * (config$limitUpper - config$limitLower) + config$limitLower
}
vel = rep(0, config$dim)
particles = push(particles, newParticle(pos, vel, swarmIndex, config$fun, config$initialTemp))
}
}
# Calculate initial best particles
best = calculateBest(particles);
gbest = best[[1]]
lbest = best[[2]]
unitedLbest = best[[3]]
particles = best[[4]]
cost = c()
for(it in 1:config$iterations){
# Update p
p = it / config$iterations * 2
if(p > 1) p = 1
#print (temp)
if(savePng()){
dir.create("plot/dls", showWarnings = FALSE)
if(it < 10) it = paste("0", it, sep="")
if(it < 100) it = paste("0", it, sep="")
name = paste(config$savePngPath, "dls/dls", it, ".png", sep="")
png(filename=name)
plot("", ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[2]))
}
# Update particle positions
for(i in 1:length(particles)){
particles[[i]] = updatePos(particles[[i]], p, lbest, unitedLbest)
if(savePng()){
points(particles[[i]]$pos[1], particles[[i]]$pos[2], ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[1]), col = colors[particles[[i]]$swarm], pch=c(1,4)[particles[[i]]$type])
}
}
# Update gbest, lbest, unitedLbest
best = calculateBest(particles);
gbest = best[[1]]
lbest = best[[2]]
unitedLbest = best[[3]]
particles = best[[4]]
# for(i in 1:length(particles)){print(particles[[i]]$best$temp)}
if(savePng()){
for(i in 1:config$sub_swarms){
points(lbest[[i]]$pos[1], lbest[[i]]$pos[2], ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[1]), cex = 2, lwd = 2, col= colors[i], pch=c(1,4)[lbest[[i]]$type])
}
points(unitedLbest$pos[1], unitedLbest$pos[2], ylim=c(config$lower[2],config$upper[2]), xlim=c(config$lower[1],config$upper[1]), lwd = 3, col="orange", pch=23)
dev.off()
}
cost = c(cost,gbest$val)
}
if(savePng()){
name = paste(config$savePngPath, "dls/dls0.png", sep="")
png(filename=name)
plot(cost, type = "s")
dev.off()
}
return (gbest)
}
path = "C:/Projects/pso/pso"
setwd(path)
source("functions.r")
config = c()
config$dim = 2
config$lower = c(-100, -100)
config$upper = c(100, 100)
config$fun = cf01
config$swarm_size = 4
config$c1 = 1.49445
config$c2 = 1.49445
config$max_vel = 6
config$inertia = 0.9
config$iterations = 200
config$coolingRate = 0.05
config$heatingRate = 0.01
config$initialTemp = 1000
config$sub_swarms = 10
config$limitLower = -100
config$limitUpper = 100
config$savePng = TRUE
config$savePngPath = "C:/Projects/pso/pso/plot/"
PSO_DLS(config)
p = acceptProbability(localBest[[swarm]]$val, particles[[i]]$best$val, particles[[i]]$best$temp)
path = "C:/Projects/pso/pso"
source('C:/Projects/pso/pso/main.r')
debugSource('C:/Projects/pso/pso/plot-pso-dls-sa.r')
localBest[[swarm]]$val
particles[[i]]$best$val
sawrm
swarm
particles[[2]]$swarm
particles[[3]]$swarm
particles[[5]]$swarm
particles[[1]]$best$val
particles[[2]]$best$val
particles[[3]]$best$val
particles[[4]]$best$val
particles[[5]]$best$val
p
r
localBest[[swarm]]
localBest[[swarm]]
localBest[[swarm]]
localBest[[swarm]]$val
i
particles[[i]]$best$val
p
r
p > r
debugSource('C:/Projects/pso/pso/pso-dls-sa.r')
debugSource('C:/Projects/pso/pso/pso-dls-sa.r')
if(newFit == currentFit) {
if(newFit == currentFit) {
debugSource('C:/Projects/pso/pso/pso-dls-sa.r')
asd
newFit
debugSource('C:/Projects/pso/pso/plot-pso-dls-sa.r')
debugSource('C:/Projects/pso/pso/plot-pso-dls-sa.r')
debugSource('C:/Projects/pso/pso/plot-pso-dls-sa.r')
newFit
currentFIt
currentFit
debugSource('C:/Projects/pso/pso/plot-pso-dls-sa.r')
debugSource('C:/Projects/pso/pso/plot-pso-dls-sa.r')
newFit
CurrentFit
currentFir
currentFit
currentFit
newFit
exp((200 - 500) / 100)
exp((200 - 500) / 10)
exp((200 - 500) / 1000)
exp((500 - 200) / 1000)
exp((500 - 200) / 100)
exp((500 - 200) / 10)
exp((500 - 500) / 10)
exp((500 - 500) / 100000)
exp((500 - 500) / 0.001)
